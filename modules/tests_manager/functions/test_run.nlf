//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function [status, test_suites] = test_run(varargin)
  status = true;
  [modules_list, files_to_test, result_outputfile, option, stoponfail] = parseInputArguments(nargin, varargin);
  nelson_version = version('-number');
  nelson_version_str = sprintf('Nelson-%d.%d.%d.%d', nelson_version(1), nelson_version(2), nelson_version(3), nelson_version(4));
  nbTestSuites = length(modules_list);
  __totalTimeBegin = tic;
  test_suites = create_test_suites();
  if ~isempty(files_to_test)
    classname = nelson_version_str;
    test_cases = create_test_cases_files(files_to_test, option, classname);
    test_suites = test_suites_process(test_suites, test_cases, '', stoponfail);
  else
    modules_idx = 1;
    for m = modules_list(:)'
      if test_suites.errors ~= 0
        status = false;
        break
      end
      fmt = ['\n %d/%d [%s]:', newline];
      fprintf(stdout, fmt, modules_idx, nbTestSuites, m{1});
      modules_idx = modules_idx + 1;
      classname = [nelson_version_str, '.', m{1}];
      tests_dir = [modulepath(m{1}), '/tests/'];
      test_cases = create_test_cases_directory(tests_dir, option, classname);
      test_suites = test_suites_process(test_suites, test_cases, m{1}, stoponfail);
    end
  end
  __totalTimeEnd = tic;
  status = test_suites.errors == 0;
  test_suites.total_time = (double(__totalTimeEnd) - double(__totalTimeBegin)) * 1e-9;
  disp_summary(test_suites);
  res = save_results(test_suites, result_outputfile);
  if ~res
    warning(_('Impossible to save results file.'));
  end
endfunction
//=============================================================================
function test_suites = test_suites_process(test_suites, test_cases, name, stoponfail)
  test_suite = create_test_suite();
  nbTestCases = length(test_cases);
  lenCharsTestCasesMax = int2str(length(int2str(nbTestCases)));
  lenCharsTestSuitesMaxAsString = int2str(length(int2str(name)));
  tests_idx = 1;
  time_test = 0;
  for ts = test_cases'
    tc = run_test_case(ts, name, tests_idx, nbTestCases);
    test_cases(tests_idx) = tc;
    time_test = time_test + tc.time;
    
    if tc.isbench
      test_suite.bench = test_suite.bench + 1;
      test_suites.bench = test_suites.bench + 1;
      
    elseif strcmp(tc.status, 'Fail')
      test_suites.tests = test_suites.tests + 1;
      test_suites.errors = test_suites.errors + 1;
      test_suite.tests = test_suite.tests + 1;
      test_suite.errors = test_suite.errors + 1;
      status = false;
      if stoponfail
        break
      end
    elseif strcmp(tc.status, 'Pass')
      test_suite.tests = test_suite.tests + 1;
      test_suite.passed = test_suite.passed + 1;
      test_suites.tests = test_suites.tests + 1;
      test_suites.passed = test_suites.passed + 1;
    elseif strcmp(tc.status, 'Skip') || strcmp(tc.status, 'Interactive') || strcmp(tc.status, 'No display')
      test_suite.tests = test_suite.tests + 1;
      test_suite.disabled = test_suite.disabled + 1;
      test_suites.tests = test_suites.tests + 1;
      test_suites.disabled = test_suites.disabled + 1;
    end
    tests_idx = tests_idx + 1;
  end
  test_suite.name = name;
  test_suite.test_cases_list = test_cases;
  test_suite.time = test_suite.time + time_test;
  
  test_suites.tests_list = [test_suites.tests_list; test_suite];
  test_suites.time = test_suites.time + test_suite.time;
  
endfunction
//=============================================================================
function [modules_list, files_to_test, result_outputfile, option, stoponfail] = parseInputArguments(nargin, args)
  stoponfail = false;
  modules_list = [];
  files_to_test = [];
  result_outputfile = [];
  option = 'all';
  supported_options = {'all', 'all_tests', 'unitary_tests', 'nonreg_tests', 'benchs'};
  switch nargin
    case 0
      // status = test_run()
      modules_list = getmodules();
      
    case 1
      // status = test_run([])
      // status = test_run('minimal_tests')
      // status = test_run('-stoponfail')
      // status = test_run(modules)
      // status = test_run(file_to_test)
      param1 = args{1};
      if isequal(size(param1), [0 0]) && isdouble(param1)
        if isdouble(param1)
          modules_list = getmodules();
        else
          error(_('[] expected.'));
        end
      end
      
      modules_list = getModulesToTest(param1);
      files_to_test = getFilesToTest(param1);
      if ~isempty(modules_list) || ~isempty(files_to_test)
        option = 'all';
      else
        stoponfail = haveStopOnFailOption(param1);
        if ~stoponfail
          option = getOption(param1);
        end
      end
    case 2
      // status = test_run(modules, '-stoponfail')
      // status = test_run(file_to_test, '-stoponfail')
      // status = test_run(modules, option)
      // status = test_run(file_to_test, option)
      // status = test_run('minimal_tests', '-stoponfail')
      // status = test_run('minimal_tests', option)
      // status = test_run([], '-stoponfail')
      // status = test_run([], option)
      // status = test_run(modules, file_output)
      // status = test_run(file_to_test, file_output)
      // status = test_run([], file_output)
      param1 = args{1};
      if isequal(size(param1), [0 0]) && isdouble(param1)
        if isdouble(param1)
          modules_list = getmodules();
        else
          error(_('[] expected.'));
        end
      else
        modules_list = getModulesToTest(param1);
        files_to_test = getFilesToTest(param1);
        if ~isempty(modules_list) && ~isempty(files_to_test)
          error(_('#1 argument: cell of modules or filenames expected.'));
        end
        if ischar(param1) && strcmp(param1, 'minimal_tests')
          option = 'unitary_tests';
        end
      end
      param2 = args{2};
      stoponfail = haveStopOnFailOption(param2);
      if ~stoponfail
        option = getOption(param2);
        if isempty(option)
          option = 'all';
          if ischar(param2)
            result_outputfile = param2;
          end
        end
      end
      
    case 3
      // status = test_run(modules, option, output_file)
      // status = test_run(modules, '-stoponfail', output_file)
      param1 = args{1};
      if isequal(size(param1), [0 0]) && isdouble(param1)
        if isdouble(param1)
          modules_list = getmodules();
        else
          error(_('[] expected.'));
        end
      else
        modules_list = getModulesToTest(param1);
        files_to_test = getFilesToTest(param1);
        if ~isempty(modules_list) && ~isempty(files_to_test)
          error(_('#1 argument: cell of modules or filenames expected.'));
        end
      end
      param2 = args{2};
      stoponfail = haveStopOnFailOption(param2);
      if ~stoponfail
        option = getOption(param2);
        if isequal(size(option), [0 0]) && isdouble(option)
          if isdouble(option)
            if ischar(param1) && strcmp(param1, 'minimal_tests')
              option = 'unitary_tests';
            else
              option = 'all';
            end
          else
            error(_('option expected.'));
          end
        end
      end
      param3 = args{3};
      if ischar(param3)
        result_outputfile = param3;
      else
        error(_('filename expected.'));
      end
      
    case 4
      // status = test_run(modules, option, output_file, '-stoponfail')
      param1 = args{1};
      param2 = args{2};
      param3 = args{3};
      param4 = args{4};
      if isequal(size(param1), [0 0]) && isdouble(param1)
        if isdouble(param1)
          modules_list = getmodules();
        else
          error(_('[] expected.'));
        end
      else
        modules_list = getModulesToTest(param1);
        files_to_test = getFilesToTest(param1);
        if ~isempty(modules_list) && ~isempty(files_to_test)
          error(_('#1 argument: cell of modules or filenames expected.'));
        end
      end
      option = getOption(param2);
      if isempty(option)
        error(_('#2 argument: option expected.'));
      end
      if ischar(param3)
        result_outputfile = param3;
      else
        error(_('#3 argument: filename expected.'));
      end
      if isequal(size(param4), [0 0]) && isdouble(param4)
        if ~isdouble(param4)
          stoponfail = haveStopOnFailOption(param4);
          if ~stoponfail
            error(_('#4 argument: -stoponfail expected'));
          end
        end
      end

    otherwise
      error(_('Wrong number of input arguments.'));
    end
  endfunction
  //=============================================================================
function modules = getModulesToTest(param)
  modules = [];
  if iscellstr(param)
    for k = param
      if ismodule(k{1})
        if isempty(modules)
          modules = k;
        else
          modules = [modules; k{1}];
        end
      end
    end
  elseif ischar(param)
    if ismodule(param)
      modules = {param};
    elseif strcmp(param, 'minimal_tests')
      run([nelsonroot(), '/modules/tests_manager/minimal_tests.nls']);
      modules = minimal_tests;
    end
  end
endfunction
//=============================================================================
function files = getFilesToTest(param)
  files = [];
  if iscellstr(param)
    for k = param
      if isfile(k{1})
        if isempty(files)
          files = k;
        else
          files = [files; k{1}];
        end
      end
    end
  elseif ischar(param)
    if isfile(param)
      files = {param};
    end
  end
endfunction
//=============================================================================
function res = haveStopOnFailOption(param)
  res = false;
  if ischar(param)
    res = strcmp(param, '-stoponfail');
  end
endfunction
//=============================================================================
function option = getOption(param)
  supported_options = {'all', 'all_tests', 'unitary_tests', 'nonreg_tests', 'benchs'};
  option = [];
  if ischar(param)
    if strcmp(param, 'minimal_tests')
      option = 'unitary_tests';
    else
      found_option = any(contains(supported_options, param));
      if found_option
        option = param;
      end
    end
  end
endfunction
//=============================================================================
function test_cases = create_test_cases_files(files, option, classname)
  test_cases = [];
  for file = files'
    test_case = create_test_case(file{1});
    test_case.classname = classname;
    test_cases =[test_cases; test_case];
  end
endfunction
//=============================================================================
function test_cases = create_test_cases_directory(directory_tests, option, classname)
  test_cases = [];
  if isdir(directory_tests)
    test_files_list = getFilesListByOption(directory_tests, option);
    for file = test_files_list
      full_file_test = [directory_tests, '/', file{1}];
      test_case = create_test_case(full_file_test);
      test_case.classname = classname;
      test_cases =[test_cases; test_case];
    end
  end
endfunction
//=============================================================================
function test_case = create_test_case(filename)
  test_case.filename = filename;
  test_case.options = test_parsetags(filename);
  test_case.msg = '';
  
  [p, f, e] = fileparts(filename);
  test_case.name = f;
  test_case.classname = '';
  test_case.status = ''; // 'Pass', 'Fail', or 'Skip'. '' not evaluated.
  test_case.time = 0;
  test_case.isbench = isbench(filename);
endfunction
//=============================================================================
function tests_list = getFilesListByOption(tests_dir, option)
  tests_list = [];
  switch option
    case 'all'
      unitary_tests = dir([tests_dir, 'test_*.nls']);
      unitary_tests = sort(string({unitary_tests.name}));
      
      nonreg_tests = dir([tests_dir, 'bug_*.nls']);
      nonreg_tests = sort(string({nonreg_tests.name}));
      
      bench_tests = dir([tests_dir, 'bench_*.nls']);
      bench_tests = sort(string({bench_tests.name}));
      
      all_tests = [unitary_tests, nonreg_tests, bench_tests];
      all_tests(all_tests == "") = [];
      
      tests_list = cell(all_tests);
      
    case 'all_tests'
      unitary_tests = dir([tests_dir, 'test_*.nls']);
      unitary_tests = sort(string({unitary_tests.name}));
      
      nonreg_tests = dir([tests_dir, 'bug_*.nls']);
      nonreg_tests = sort(string({nonreg_tests.name}));
      
      all_tests = [unitary_tests, nonreg_tests];
      all_tests(all_tests == "") = [];
      
      tests_list = cell(all_tests);
      
    case 'unitary_tests'
      unitary_tests = dir([tests_dir, 'test_*.nls']);
      unitary_tests = sort(string({unitary_tests.name}));
      unitary_tests(unitary_tests == "") = [];
      
      tests_list = cell(unitary_tests);
      
    case 'nonreg_tests'
      nonreg_tests = dir([tests_dir, 'bug_*.nls']);
      nonreg_tests = sort(string({nonreg_tests.name}));
      nonreg_tests(nonreg_tests == "") = [];
      
      tests_list = cell(nonreg_tests);
      
    case 'benchs'
      bench_tests = dir([tests_dir, 'bench_*.nls']);
      bench_tests = sort(string({bench_tests.name}));
      bench_tests(bench_tests == "") = [];
      
      tests_list = cell(bench_tests);
      
    otherwise
      error(_('Argument not managed.'));
    end
  endfunction
  //=============================================================================
function res = save_as_json(test_suites, jsonFileDestination)
  filewrite(jsonFileDestination, jsonprettyprint(jsonencode(test_suites)))
  res = isfile(jsonFileDestination);
endfunction
//=============================================================================
function res = save_results(test_suites, result_outputfile)
  if ~isempty(result_outputfile) && ischar(result_outputfile) 
    [p, f, e] = fileparts(result_outputfile);
    if strcmp(e, '.*')
      res = save_as_xml(test_suites, [p, filesep, f, '.xml']);
      res = res && save_as_json(test_suites, [p, filesep, f, '.json']);
    elseif strcmp(e, '.xml')
      res = save_as_xml(test_suites, result_outputfile);
    elseif strcmp(e, '.json')
      res = save_as_json(test_suites, result_outputfile);
    else
      res = save_as_xml(test_suites, result_outputfile);
    end
  end
  //=============================================================================
function res = save_as_xml(test_suites, xmlFileDestination)
  res = false;
  eol = newline;
  fp = fopen(xmlFileDestination, 'wt');
  if fp ~= -1
    fprintf(fp, ['<?xml version="1.0"?>', eol]);
    fprintf(fp, ['<testsuites tests="', int2str(test_suites.tests), '" disabled="', int2str(test_suites.disabled), '" time="', mat2str(test_suites.time, 2), '" errors="', int2str(test_suites.errors),'">', eol]);
    
    for test_suite = test_suites.tests_list'
      fprintf(fp, ['  <testsuite name="', test_suite.name, '" id="', test_suite.id, '" time="', mat2str(test_suite.time, 2), '" tests="', int2str(test_suite.tests), '" skipped="', int2str(test_suite.disabled),'" errors="', int2str(test_suite.errors), '" hostname="', test_suite.hostname, '" timestamp="', test_suite.timestamp, '" ', '>', eol]);
      fprintf(fp, ['    <properties>', eol]);
      fprintf(fp, ['      <property name="', 'environment', '" value="', test_suite.environment,'"/>', eol]);
      fprintf(fp, ['    </properties>', eol]);
      
      for tc = test_suite.test_cases_list
        if tc.isbench
          for t = tc'
            if strcmp(t.status, 'Fail') == true
              fprintf(fp, ['    <testcase name="', t.name, '" time="', mat2str(t.time, 2), '" classname="', t.classname, '">', eol]);
              if isstruct(t.msg)
                msg = t.msg.message;
              else
                msg = t.msg;
              end
              if length(msg) > 0
                fprintf(fp, ['      <error type="error" message="', _('test failed'), '">', '<![CDATA[', msg, ']]>', '</error>', eol]);
              end
              fprintf(fp, ['    </testcase>', eol]);
            else
              fprintf(fp, ['    <testcase name="', t.name, '" time="', mat2str(t.time, 2), '" classname="', t.classname, '">', eol]);
              if isstruct(t.msg)
                msg = t.msg.message;
              else
                msg = t.msg;
              end
              fprintf(fp, ['    </testcase>', eol]);
            end
          end
        else
          for t = tc'
            if strcmp(t.status, 'Pass') == true
              fprintf(fp, ['    <testcase name="', t.name, '" time="', mat2str(t.time, 2), '" classname="', t.classname, '">', eol]);
              if isstruct(t.msg)
                msg = t.msg.message;
              else
                msg = t.msg;
              end
              fprintf(fp, ['    </testcase>', eol]);
            else
              if strcmp(t.status, 'Fail') == true
                fprintf(fp, ['    <testcase name="', t.name, '" time="', mat2str(t.time, 2), '" classname="', t.classname, '">', eol]);
                if isstruct(t.msg)
                  msg = t.msg.message;
                else
                  msg = t.msg;
                end
                if length(msg) > 0
                  if iscellstr(msg)
                    fprintf(fp, ['      <error type="error" message="', _('test failed'), '">', '<![CDATA[', eol]);
                    for m = msg(:)'
                      fprintf(fp, [m{1}, eol]);
                    end
                    fprintf(fp, [']]>', '</error>', eol]);
                  else
                    fprintf(fp, ['      <error type="error" message="', _('test failed'), '">', '<![CDATA[', msg, ']]>', '</error>', eol]);
                  end
                end
                fprintf(fp, ['    </testcase>', eol]);
              else
                if strcmp(t.status, 'Skip') == true || strcmp(t.status, 'Interactive') == true || strcmp(t.status, 'No display') == true
                  fprintf(fp, ['    <testcase name="', t.name, '" time="', mat2str(t.time, 2), '" classname="', t.classname, '"/>', eol]);
                  fprintf(fp, ['      <skipped/>', eol]);
                end
              end
            end
          end
          
        end
      end
      fprintf(fp, ['  </testsuite>', eol]);
    end
    fprintf(fp, ['</testsuites>', eol]);
    fclose(fp);
    res = true;
  end
endfunction
//=============================================================================
function disp_summary(test_suites)
  fprintf(stdout, ['  //==========================================================================', newline]);
  fprintf(stdout, ['  ', _('Summary:'), newline]);
  fprintf(stdout, ['  ', _('Tests:'), ' ', int2str(test_suites.tests), newline]);
  fprintf(stdout, ['  ', _('Passed:'), ' ', int2str(test_suites.passed), newline]);
  fprintf(stdout, ['  ', _('Failed:'), ' ', int2str(test_suites.errors), newline]);
  fprintf(stdout, ['  ', _('Skipped:'), ' ',  int2str(test_suites.disabled), newline]);
  fprintf(stdout, ['  ', _('Benchs:'), ' ', int2str(test_suites.bench), newline]);
  if test_suites.time > 100
    fprintf(stdout, ['  ', _('Tests time:'), ' ', mat2str(test_suites.time * inv(60), 2), ' min', newline]);
  else
    fprintf(stdout, ['  ', _('Tests time:'), ' ', mat2str(test_suites.time, 2), ' s ', newline]);
  end
  if test_suites.total_time > 100
    fprintf(stdout, ['  ', _('Total time:'), ' ', mat2str(test_suites.total_time * inv(60), 2), ' min', newline]);
  else
    fprintf(stdout, ['  ', _('Total time:'), ' ', mat2str(test_suites.total_time, 2), ' s ', newline]);
  end
  fprintf(stdout, ['  //===========================================================================', newline]);
endfunction
//=============================================================================
function res = haveDisplay()
  res = true;
  if ~ispc()
    if ~ismac()
      DISPLAY_ENV = getenv('DISPLAY');
      res = ~strcmp(DISPLAY_ENV, '');
    end
  end
endfunction
//=============================================================================
function r = isbench(filename)
  [p, fwext] = fileparts(filename);
  r = startsWith(fwext, 'bench_');
endfunction
//=============================================================================
function r = is_release()
  ver_comp = version('-compiler');
  r = startsWith(ver_comp{2}, 'release');
endfunction
//=============================================================================
function r = have_audio_input()
  if ismodule('audio')
    if strcmp(getenv('AUDIODEV'), 'null') == true
      r = false;
    else
      devices = audiodevinfo('default');
      r = ~isempty(devices.input);
    end
  else
    r = false;
  end
endfunction
//=============================================================================
function r = have_audio_output()
  if ismodule('audio')
    if strcmp(getenv('AUDIODEV'), 'null') == true
      r = false;
    else
      devices = audiodevinfo('default');
      r = ~isempty(devices.output);
    end
  else
    r = false;
  end
endfunction
//=============================================================================
function r = have_excel()
  if ispc()
    if ismodule('com_engine')
      persistent excel_detected;
      if isempty(excel_detected)
        try
          excelApplication = actxserver('Excel.Application');
          excelApplication.Quit;
          delete(excelApplication);
          excel_detected = true;
          r = excel_detected;
        catch
          excel_detected = false;
          r = excel_detected;
        end
      else
        r = excel_detected;
      end
    end
  else
    r = false;
  end
endfunction
//=============================================================================
function r = have_c_cpp_compiler()
  r = havecompiler();
endfunction
//=============================================================================
function r = have_64_bit_index_supported()
  compiler_info = version('-compiler');
  r = strcmp(compiler_info{3}, '64');
endfunction
//=============================================================================
function test_case_res = run_test_case(test, module_name, index, indexMax)
  test_case_res = test;
  is_bench = test.isbench;
  fmtStart = [' ', '%0', int2str(length(int2str(indexMax))), 'd/', '%d - [%s] %s'];
  startChars = sprintf(fmtStart, index, indexMax, module_name, test_case_res.name);
  fprintf(stdout, '%s', startChars);
  skip = false;
  if (test_case_res.options.audio_input_required && ~have_audio_input())
    test_case_res.status = 'Skip';
    test_case_res.time = 0.;
    skip = true;
  end
  if (test_case_res.options.audio_output_required && ~have_audio_output())
    test_case_res.status = 'Skip';
    test_case_res.time = 0.;
    skip = true;
  end
  if (test_case_res.options.index_64_bit_required && ~have_64_bit_index_supported())
    test_case_res.status = 'Skip';
    test_case_res.time = 0.;
    skip = true;
  end
  if (test_case_res.options.c_cpp_compiler_required && ~have_c_cpp_compiler())
    test_case_res.status = 'Skip';
    test_case_res.time = 0.;
    skip = true;
  end
  if (test_case_res.options.excel_required && ~have_excel())
    test_case_res.status = 'Skip';
    test_case_res.time = 0.;
    skip = true;
  end
  if (test_case_res.options.release_only && ~is_release())
    test_case_res.status = 'Skip';
    test_case_res.time = 0.;
    skip = true;
  end
  if (~haveDisplay() && test_case_res.options.with_display)
    test_case_res.status = 'No display';
    test_case_res.time = 0.;
    skip = true;
  end
  if (test_case_res.options.not_fixed)
    test_case_res.status = 'Skip';
    test_case_res.time = 0.;
    skip = true;
  end
  if (test_case_res.options.interactive_test)
    test_case_res.status = 'Interactive';
    test_case_res.time = 0.;
    skip = true;
  end
  if ~skip
    is_all_platforms =  ~test_case_res.options.windows_only && ~test_case_res.options.mac_only && ~test_case_res.options.unix_only;
    is_current_platform = (ispc() && test_case_res.options.windows_only) || (ismac() && test_case_res.options.mac_only) || (isunix() && ~ismac() && test_case_res.options.unix_only);
    if (is_all_platforms || is_current_platform)
      testfile = test.filename;
      [p, f, e] = fileparts(testfile);
      outputfile = [tempdir(), '' , f, '.output'];
      if isfile(outputfile)
        r = rmfile(outputfile);
      end
      redirect_err = [tempdir(), '' , f, '.err'];
      r = rmfile(redirect_err);
      if is_bench
        timeout = int2str(360);
      else
        timeout = int2str(120);
      end
      cmd = '';
      
      command_filename = [tempdir(), 'test_', createGUID(), '.nls'];
      content = {['res_struct = test_runfile(''', testfile, ''',', int2str(test_case_res.options.mpi_mode),');'];
      ['filewrite(''', outputfile, ''', jsonencode(res_struct));']};
      if test_case_res.options.mpi_mode
        content = [content; 'exit();'];
      else
        content = [content; 'exit(double(res_struct.r));'];
      end
      filewrite(command_filename, content);
      
      if test_case_res.options.english_imposed
        cmd = [' --language', ' ', 'en_US'];
      end
      if test_case_res.options.no_user_modules
        cmd = [cmd, ' ', '--nousermodules'];
      end
      if ~test_case_res.options.ipc_required
        cmd = [cmd, ' ', '--noipc'];
      end
      redirect_to_file = [' 2>&1 "' , redirect_err, '"'];
      
      cmd = [cmd, ' --quiet', ' ', '--nouserstartup', ' ', '--timeout', ' ', timeout, ' ', '--file', ' "', command_filename, '" ', redirect_to_file];
      if test_case_res.options.cli_mode
        [res, msg] = call_nelson_cli(cmd, test_case_res.options.mpi_mode);
      else
        if test_case_res.options.gui_mode
          [res, msg] = call_nelson_gui(cmd, test_case_res.options.mpi_mode);
        else
          if test_case_res.options.adv_cli_mode
            [res, msg] = call_nelson_adv_cli(cmd, test_case_res.options.mpi_mode);
          else
            [res, msg] = call_nelson_cli(cmd, test_case_res.options.mpi_mode);
          end
        end
      end
      rmfile(command_filename);
      test_case_res.msg = msg;
      if test_case_res.options.mpi_mode
        if isfile(outputfile)
          s = jsondecode(fileread(outputfile));
          res = s.r;
          test_case_res.msg = s.msg;
          if res == 1
            test_case_res.status = 'Pass';
            test_timing = s.timing;
          else
            test_case_res.status = 'Fail';
            test_timing = s.timing;
          end
        else
          test_case_res.status = 'Fail';
          test_timing = 0;
        end
      else
        if res ~= 1
          test_case_res.status = 'Fail';
          test_timing = 0;
          if isfile(outputfile)
            s = jsondecode(fileread(outputfile));
            if isempty(s)
              test_case_res.status = 'Skip';
              test_case_res.time = 0.;
            else
              test_case_res.msg = s.msg;
            end
          end
        else
          if isfile(outputfile)
            s = jsondecode(fileread(outputfile));
            r = rmfile(outputfile);
            if (s.r)
              if is_bench
                if s.timing > 100
                  test_case_res.status = [mat2str(s.timing * inv(60), 2), ' min'];
                else
                  if s.timing < 1e-3
                    test_case_res.status = [mat2str(s.timing * 1e3, 2), ' ms'];
                  else
                    test_case_res.status = [mat2str(s.timing, 2), ' s'];
                  end
                end
              else
                test_case_res.status = 'Pass';
              end
              test_case_res.time = s.timing;
            end
            // delete error redirection if test is OK
            // no need to conserve in this case
            if isfile(redirect_err)
              r = rmfile(redirect_err);
            end
          else
            test_case_res.status = 'Fail';
            test_case_res.time = 0;
          end
        end
      end
    else
      test_case_res.status = 'Skip';
      test_case_res.time = 0.;
    end
  end
  nbCharsStart = length(startChars);
  nb_spaces = 80 - nbCharsStart - length(test_case_res.status);
  fprintf(stdout, [blanks(nb_spaces), test_case_res.status, newline]);
  
  if strcmp(test_case_res.status, 'Fail') == true
    disp(['    run(''', test.filename, ''')']);
    if strcmp(test_case_res.msg, '') == false
      disp(_('    Error:'));
      if strcmp(class(test_case_res.msg), 'cell') == 1
        for k = test_case_res.msg(:)'
          disp(['      ', k]);
        end
      else
        if strcmp(class(test_case_res.msg), 'struct') == true
          disp(['      ', test_case_res.msg.message]);
        else
          disp(['      ', test_case_res.msg]);
        end
      end
    end
    disp(' ');
  end
endfunction
//=============================================================================
function info = get_environment_test()
  platform = '';
  if ismac()
    platform = 'macos';
  else
    if isunix()
      platform = 'unix';
    else
      if ispc()
        platform = 'windows';
      else
        platform = 'unknow';
      end
    end
  end
  compiler = version('-compiler');
  compiler_str = [];
  for c = compiler
    compiler_str = [compiler_str, ' ', c{1}];
  end
  info = ['Nelson', ' ', version(), ' ', platform, ' ', compiler_str];
endfunction
//=============================================================================
function test_suite = create_test_suite()
  test_suite.name = '';
  test_suite.tests = 0;
  test_suite.disabled = 0;
  test_suite.errors = 0;
  test_suite.passed = 0;
  test_suite.bench = 0;
  test_suite.hostname = hostname();
  test_suite.id = createGUID();
  test_suite.package = '';
  test_suite.skipped = 0;
  test_suite.time = 0;
  test_suite.timestamp = timestamp(); // 2017-01-21T16:17:18
  test_suite.environment = get_environment_test();
  test_suite.test_cases_list = struct([]);
endfunction
//=============================================================================
function test_suites = create_test_suites()
  test_suites.disabled = 0;
  test_suites.errors = 0;
  test_suites.name = '';
  test_suites.passed = 0;
  test_suites.tests = 0;
  test_suites.bench = 0;
  test_suites.time = 0;
  test_suites.tests_list = struct([]);
endfunction
//=============================================================================
function t = timestamp()
  n = now();
  v = datevec(n);
  t = sprintf('%d-%02d-%02dT%02d:%02d:%02d', v(1), v(2), v(3), v(4), v(5), v(6));
endfunction
//=============================================================================
function pc = prefixCommand(withMPI)
  pc = '';
  if withMPI
    pc = ['mpiexec -n 2 '];
  end
endfunction
//=============================================================================
function [res, msg] = call_nelson_cli(command, withMPI)
  [res, msg] = call_nelson_mode('nelson-cli', command, withMPI);
endfunction
//=============================================================================
function [res, msg] = call_nelson_adv_cli(command, withMPI)
  [res, msg] = call_nelson_mode('nelson-adv-cli', command, withMPI);
endfunction
//=============================================================================
function [res, msg] = call_nelson_gui(command, withMPI)
  [res, msg] = call_nelson_mode('nelson-gui', command, withMPI);
endfunction
//=============================================================================
function [res, msg] = call_nelson_mode(exe, command, withMPI)
  nelson_bin_path = modulepath(nelsonroot(), 'nelson', 'bin');
  nelson_exe_path = ['"', nelson_bin_path, '/', exe, '"'];
  cmd = [prefixCommand(withMPI), nelson_exe_path, ' ' , command];
  [res, msg] = unix(cmd);
endfunction
//=============================================================================
