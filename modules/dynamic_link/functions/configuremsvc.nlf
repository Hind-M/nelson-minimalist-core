//=============================================================================
// Copyright (c) 2016-2018 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function [status, message] = configuremsvc()
  // currently only VS 2017
  status = false;
  message = '';
  if ~ispc()
    status = false;
    message = _('Not implemented on this platform.');
    return
  end  
  vsconfig = [modulepath('dynamic_link'), '/resources/msvc2017.json'];
  [status, message] = checkExistFile(vsconfig);
  if ~status
    return
  end
  txt = fileread(vsconfig);
  msvc2017 = jsondecode(txt);
  need_to_redefine = false;
  for k = msvc2017.ENVIRONMENT_VARIABLES
    if (strcmp(k{1}, 'PATH') == false)
      current_env = getenv(k{1});
      if (strcmp(current_env, '') == true)
        need_to_redefine = true;
        break;
      end
    end
  end
  if ~need_to_redefine
    status = true;
    message = '';
    return
  end
  try
    vsjon = vswhere();
    status = true;
  catch
    e = lasterror();
    message = e.message;
    return
  end

  vsinfo_batch = [modulepath('dynamic_link'), '/resources/vcinfo.bat'];
  arch = computer('arch');
  vcvarsbatpath = [vsjon.installationPath,'/VC/Auxiliary/Build'];
  if strcmp(arch, 'win64')
    vcvarsbat = 'vcvars64.bat';
  else
    vcvarsbat = 'vcvars32.bat';
  end
  vcvarsbatfullfilename = [vcvarsbatpath, '/', vcvarsbat];
  vcinfo_batchpath = [modulepath('dynamic_link'), '/resources'];
  vcinfo_batch = 'vcinfo.bat';
  vcinfo_batchfullfilename = [vcinfo_batchpath, '/', vcinfo_batch];
  [status, message] = checkExistFile(vcinfo_batchfullfilename);
  if ~status
    return
  end  
  [status, message] = checkExistFile(vcvarsbatfullfilename);
  if ~status
    return
  end
  current_path = getenv('PATH');
  if ~contains(current_path, vcvarsbatpath)
    setenv('PATH', [getenv('PATH'), ';', vcvarsbatpath]);
  end
  if ~contains(current_path, vcinfo_batchpath)
    setenv('PATH', [getenv('PATH'), ';', vcinfo_batchpath]);
  end
  for k = msvc2017.ENVIRONMENT_VARIABLES
    cmd = [vcinfo_batch, ' ', vcvarsbat, ' ', k{1}];
    [s, m] = unix(cmd);
    if (s ~= 0)
      status = false;
      message = [k{1}, ' ', _('environment variable does not exist.')];
      return
    end
    // ack to remove '\n' at the end
    m(m == 10) = '';
    current_env = getenv(k{1});
    if strcmp(current_env, '')
      setenv(k{1}, m);
    else
      if ~contains(current_env, m)
        setenv(k{1}, m);
      end
    end
  end
  status = true;
  msg = '';
endfunction
//=============================================================================
function [status, message] = checkExistFile(filename, errormsg)
  message = '';
  status = isfile(filename);
  if ~status
    message = [filename, ' ', _('does not exist.')];
  end  
endfunction
//=============================================================================