//=============================================================================
// Copyright (c) 2016-2018 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function buildhelp(varargin)
  // build Nelson help files
  // buildhelp() build help of Nelson
  // buildhelp(module_name) build help of a module loaded in Nelson
  //
  if nargin() > 1
    error(_('Wrong number of input arguments.'));
  end
  if ismodule('help_browser')
    helpbrowser('-clearcache');
  end
  pref_help = [prefdir(), '/help_index.bin'];
  if isfile(pref_help)
    rmfile(pref_help);
  end
  if nargin() == 0
    helpForNelsonOnly()
    run([nelsonroot() '/modules/' 'modules.nls']);
    
    for m = modules_help_list
      module_path = [nelsonroot() '/modules/' m{1}];
      buildhelp_from_path(m{1}, module_path);
    end
  else
    module = varargin{1};
    module_path = modulepath(module);
    buildhelp_from_path(module, module_path);
  end
endfunction
//=============================================================================
function buildhelp_from_path(module, module_path)
  for k = getavailablelanguages()
    src = [module_path, '/help/', k{1}, '/xml'];
    if isdir(src)
      if ispc() | ismac()
        dstbuild = [tempdir(), '/build_help/modules/', module, '/help/', k{1}, '/'];
      else
        username = getenv('USER');
        dstbuild = [tempdir(), '/', username, '/build_help/modules/', module, '/help/', k{1}, '/'];
      end
      if isdir(dstbuild)
        [res, msg] = rmdir(dstbuild, 's');
        if ~res
          error(msg);
        end
      end
      res = mkdir(dstbuild);
      if ~res
        error(msg);
      end
      p = xmldoctohelp(src, dstbuild, module);
      if isfile(p)
        dst = [module_path, '/help/', k{1}];
        if copyfile(p, dst, 'f')
          disp(['help ''', module, ''' (', k{1}, ') generated.']);
        else
          disp(_('Impossible to copy help file generated.'));
        end
      else
        disp([module, _(' file was not generated.')]);
      end
    end
  end
endfunction
//=============================================================================
function helpForNelsonOnly()
  changes_md = [nelsonroot(), '/CHANGELOG.md'];
  for k = getavailablelanguages()
    dir_src = [nelsonroot(), '/modules/main/help/', k{1}, '/html'];
    if isdir(dir_src)
      md_files = ['homepage.md', 'license.md', 'GPL2.md'];
      for md_filename = md_files
        html_filename = strrep(md_filename{1}, '.md', '.html');
        if needTobeGenerated([dir_src, '/', md_filename{1}], [dir_src, '/', html_filename])
          if strcmp(md_filename{1}, 'homepage.md')
            content = fileread([dir_src, '/', md_filename{1}]);
            content = strrep(content, '[Changelog](changelog.md)', '[Changelog](changelog.html)'),
            content = strrep(content, '[Nelson license](license.md)', '[Nelson license](license.html)');
            content_as_html = markdown(content);
            filewrite(html_filename, content_as_html);
          else
            r = markdown(homepage_md, homepage_html);
            if (r == false)
              error([_('file not generated:'), char(13), homepage_html]);
            end
          end
        end
      end
      qhelpgenerator(dir_src,  dir_dst, 'org.nelson.help.qch')
      disp(['help ''', 'homepage', ''' (', k{1}, ') generated.']);
    end
  end
endfunction
//=============================================================================
function tf = needTobeGenerated(md_filename, html_filename)
  if isfile(html_filename)
    html_file_info = dir(html_filename);
    md_file_info = dir(md_filename);
    tf = md_file_info.datenum > html_file_info.datenum;
  else
    tf = true;
  end
endfunction
//=============================================================================
