//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function mex(varargin)
    if nargin() == 0
        error('blabla')
    end
    interleavedComplex = '';
    filenames = {};
    functionName = '';
    param1 = varargin{1};
    idxFilenames = 1;
    if strcmp(param1, '-output')
        functionName = varargin{2};
        idxFilenames = 3;
    else
        [p, f, e ] = fileparts(varargin{1});
        functionName = f;
    end
    api = varargin{idxFilenames};
    if strcmp(api, '-R2018a') || strcmp(api, '-R2017b')
        idxFilenames = idxFilenames + 1;
        if strcmp(api, '-R2018a')
            interleavedComplex = 'MX_HAS_INTERLEAVED_COMPLEX';
        end
    end
    if isempty(interleavedComplex)
        defines = {};
    else
        defines = { interleavedComplex };
    end
    filenames = varargin(idxFilenames:end);
    destinationPath = fileparts(varargin{idxFilenames}, 'path');
    if isempty(destinationPath)
        destinationPath = pwd();
    end
    builtin_table = {{functionName, -1, -1, 'C_MEX_BUILTIN'}};
    dlgeneratecleaner(destinationPath);
    dlgenerategateway(destinationPath, functionName, builtin_table);
    filenames = [filenames, 'Gateway.cpp'];
    [status, message] = dlgeneratemake(destinationPath, ...
    functionName, ...
    filenames, ...
     [{destinationPath}; dlgetnelsonincludes()], ...
     defines, ...
     dlgetnelsonlibraries());
    if ~status
        error(message);
    end
    dlgenerateloader(destinationPath, functionName, true);
    dlgenerateunloader(destinationPath, functionName, true);
    [status, message] = dlmake(destinationPath);
    if ~status
        error(message);
    end

endfunction
