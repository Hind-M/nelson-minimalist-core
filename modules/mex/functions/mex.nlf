//=============================================================================
// Copyright (c) 2016-present Allan CORNET (Nelson)
//=============================================================================
// This file is part of the Nelson.
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// Alternatively, you can redistribute it and/or
// modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program. If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function mex(varargin)
  if nargin() == 0
    error(_('Wrong number of input arguments.'));
  end
  params = varargin(:)';
  filenames = getFilenames(params);
  [status, apiVersion] = containsApiVersion(params);
  hasinterleavedcomplex = false;
  interleavedComplex = '';
  if status
    if strcmp(apiVersion, '-R2018a') == true
      hasinterleavedcomplex = true;
      interleavedComplex = 'MX_HAS_INTERLEAVED_COMPLEX';
    end
  end
  [status, outputName] = containsOutput(params);    
  if status
    functionName = outputName;
  else
    [p, f, e ] = fileparts(filenames{1});
    functionName = f;
  end
  if isempty(interleavedComplex)
    defines = {};
  else
    defines = { interleavedComplex };
  end
  destinationPath = fileparts(filenames{1}, 'path');
  if isempty(destinationPath)
    destinationPath = pwd();
  end
  build_configuration = [];
  if ~ispc()
    c_flags = '-Werror=implicit-function-declaration';
    cxx_flags = '-Werror=implicit-function-declaration';
  else
    c_flags = [];
    cxx_flags = [];
  end
  dlgeneratecleaner(destinationPath);
  dlgeneratemexgateway(destinationPath, functionName, hasinterleavedcomplex);
  filenames = [filenames, 'mexGateway.c'];
  [status, message] = dlgeneratemake(destinationPath, ...
  functionName, ...
  filenames, ...
  [{destinationPath}; dlgetnelsonincludes()], ...
  defines, ...
  dlgetnelsonlibraries(), ...
  build_configuration, ...
  c_flags, ...
  cxx_flags);
  if ~status
    error(message);
  end
  dlgenerateloader(destinationPath, functionName, true);
  dlgenerateunloader(destinationPath, functionName, true);
  [status, message] = dlmake(destinationPath);
  if ~status
    error(message);
  end
endfunction
//=============================================================================
function [status, apiVersion] = containsApiVersion(params)
  status = false;
  apiVersion = '-R2017b';
  for v = params
    if ischar(v{1})
      if strcmp(v{1}, '-R2018a') || strcmp(v{1}, '-R2017b')
        status = true;
        apiVersion = v{1};
        break;
      end
    end
  end
endfunction
//=============================================================================
function [status, outputName] = containsOutput(params)
  status = false;
  outputName = '';
  p = 1;
  len = length(params);
  for p = 1:len
    v = params{p};
    if ischar(v)
      if strcmp(v, '-output') == true
        outputName = params{p + 1};
        status = true;
        break;
      end
    end
    p = p + 1;
  end
endfunction
//=============================================================================
function filenames = getFilenames(params)
  filenames = {};
  for p = params
    if ischar(p{1}) && isfile(p{1})
      isSupportedExtensions = endsWith(p{1}, '.c', 'IgnoreCase', true) || endsWith(p{1}, '.cpp', 'IgnoreCase', true);
      if isSupportedExtensions
        filenames{end + 1} = p{1};
      end
    end
  end
endfunction
//=============================================================================
