//=============================================================================
// Copyright (c) 2016-2018 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('logm'), 1);
assert_isequal(nargout('logm'), 1);
//=============================================================================
R = logm([1, 2; 3, 4]);
REF = [  -0.3504 + 2.3911i   0.9294 - 1.0938i
   1.3940 - 1.6406i   1.0436 + 0.7505i];
assert_isapprox(R, REF, 1e-4);
assert_isequal(class(R), 'double');
//=============================================================================
R = logm(single([1, 2; 3, 4]));
REF = [  -0.3504 + 2.3911i   0.9294 - 1.0938i
   1.3940 - 1.6406i   1.0436 + 0.7505i];
REF = single(REF);   
assert_isapprox(abs(R), abs(REF), 1e-4);
assert_isequal(class(R), 'single');
//=============================================================================
R = logm([]);
REF = [];
assert_isequal(R, REF);
//=============================================================================
R = logm(100);
REF = 4.6052;
assert_isapprox(R, REF, 1e-4);
//=============================================================================
assert_checkerror('R = logm(NaN);', _('Input must be finite.'));
//=============================================================================
assert_checkerror('R = logm(inf);', _('Input must be finite.'));
//=============================================================================
R = logm(i);
REF = 0.0000 + 1.5708i;
assert_isapprox(R, REF, 1e-4);
//=============================================================================
M = [1 -1 -1;0 1 -1; 0 0 1];
R = logm(M);
// singular values
//=============================================================================
M = [1 -1;0 1];
R = logm(M);
// singular values
//=============================================================================
M = eye(100);
R = logm(M);
REF = zeros(100, 100);
assert_isequal(R, REF);
//=============================================================================
M = [1 1 0; 0 0 2; 0 0 -1] + i;
R = logm(M);
REF = [ -32.4164-8.1147i, 3.1082-9.8623i, 38.6329-14.7515i;
  33.9775+8.1734i, -1.5471+9.9210i, -37.0718+17.9518i;
  -0.4098+1.1903i, -0.4098+1.1903i, -0.4098-1.9512i];
if ~isapprox(R, REF, 1e-4)
REF = [-32.7813 - 8.9626i     3.3909 - 9.9839i    39.5630 - 14.1468i
    34.3423 + 9.0213i    -1.8298 + 10.0426i   -38.0019 + 17.3471i
    -0.4098 + 1.1903i    -0.4098 + 1.1903i    -0.4098 - 1.9512i];  
end
assert_isapprox(abs(R), abs(REF), 1e-4);
//=============================================================================
assert_checkerror('logm([1 2])', _('Square matrix expected.'));
//=============================================================================
M = [0 1; 0 0];
R = logm(M);
// singular values
//=============================================================================
M = [2.7183, 1.7183, 1.0862;
          0, 1.0000, 1.2642;
          0, 0, 0.3679];
R = logm(M);
REF = [1, 1, 0.0001;
         0, 0, 1.9999;
         0, 0, -0.9999];
assert_isapprox(R, REF, 1e-4);
//=============================================================================
M = [-1 2 ; 4 -1];
R = logm(M);
REF = [0.9730+1.5708i, -0.2613-1.1107i;
  -0.5226-2.2214i, 0.9730+1.5708i];
assert_isapprox(R, REF, 1e-4);
//=============================================================================
M = expm(logm([-1 2 ; 4 -1]));
R = logm(M);
REF = [ 0.9730+1.5708i, -0.2613-1.1107i;
    -0.5226-2.2214i, 0.9730+1.5708i];
assert_isapprox(R, REF, 1e-4);
//=============================================================================
