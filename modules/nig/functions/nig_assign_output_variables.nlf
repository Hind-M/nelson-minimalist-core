//=============================================================================
// Copyright (c) 2016-2017 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
function txt = nig_assign_output_variables(NIG_FUNCTION)
  txt = {'    // ASSIGN OUTPUT VARIABLES';
         ''};
  n = 0;
  for k = NIG_FUNCTION.VARIABLES
    if strcmp(k.MODE, 'output') | strcmp(k.MODE, 'in_out')
      txt{end + 1} = ['    if (nLhs > ', int2str(n), ')'];
      txt{end + 1} = '    {';
      
      if strcmp(k.TYPE, 'double_array')
          if isfield(k, 'DIMENSION_M') & ~isempty(k.DIMENSION_M)
          if isnumeric(k.DIMENSION_M)
            DIMENSION_M_str = int2str(k.DIMENSION_M);
          else
            DIMENSION_M_str = k.DIMENSION_M;
          end
        else
          DIMENSION_M_str = '1';
        end
        if isfield(k, 'DIMENSION_N') & ~isempty(k.DIMENSION_N)
          if isnumeric(k.DIMENSION_N)
            DIMENSION_N_str = int2str(k.DIMENSION_N);
          else
            DIMENSION_N_str = k.DIMENSION_N;
          end
        else
          DIMENSION_N_str = '1';
        end
        txt{end + 1} = ['        Dimensions dims(', DIMENSION_M_str, ' , ', DIMENSION_M_str, ');'];
        txt{end + 1} = ['        ', k.NAME, '_output = ArrayOf(NLS_DOUBLE, dims, ', k.NAME, '_ptr);'];
      end

      if strcmp(k.TYPE, 'integer_array')
          if isfield(k, 'DIMENSION_M') & ~isempty(k.DIMENSION_M)
          if isnumeric(k.DIMENSION_M)
            DIMENSION_M_str = int2str(k.DIMENSION_M);
          else
            DIMENSION_M_str = k.DIMENSION_M;
          end
        else
          DIMENSION_M_str = '1';
        end
        if isfield(k, 'DIMENSION_N') & ~isempty(k.DIMENSION_N)
          if isnumeric(k.DIMENSION_N)
            DIMENSION_N_str = int2str(k.DIMENSION_N);
          else
            DIMENSION_N_str = k.DIMENSION_N;
          end
        else
          DIMENSION_N_str = '1';
        end
        txt{end + 1} = ['        Dimensions dims(', DIMENSION_M_str, ' , ', DIMENSION_M_str, ');'];
        txt{end + 1} = ['        ', k.NAME, '_output = ArrayOf(NLS_INT32, dims, ', k.NAME, '_ptr);'];
      end

      if strcmp(k.TYPE, 'double')
        txt{end + 1} = ['        ', k.NAME, '_output = ArrayOf::doubleConstructor(', k.NAME, '_scalar);'];
      end

      if strcmp(k.TYPE, 'integer')
        txt{end + 1} = ['        ', k.NAME, '_output = ArrayOf::int32Constructor(', k.NAME, '_scalar);'];
      end

      txt{end + 1} = ['        retval.pushback(', k.NAME, '_output);'];
      txt{end + 1} = '    }';
      n = n + 1;
    end
  end

endfunction
//=============================================================================
