//=============================================================================
// Copyright (c) 2016-2019 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
test_h5_save_file = [tempdir(), '/test_h5_save.h5'];
if isfile(test_h5_save_file)
  rmfile(test_h5_save_file);
end
//=============================================================================
// double
//=============================================================================
A = eye(3, 4);
h5_save(test_h5_save_file, 'A');
assert_istrue(isfile(test_h5_save_file));
schema_version = h5readatt(test_h5_save_file, '/', 'NELSON_schema');
assert_isequal(schema_version, int32(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = 1;
h5_save(test_h5_save_file, 'A');
assert_istrue(isfile(test_h5_save_file));
schema_version = h5readatt(test_h5_save_file, '/', 'NELSON_schema');
assert_isequal(schema_version, int32(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = eye(3, 4) + i;
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_complex');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
REF = struct();
REF.real = eye(3, 4);
REF.imag = ones(3, 4);
assert_isequal(R, REF);
//=============================================================================
A = 1 + 2i;
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_complex');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
REF = struct();
REF.real = 1;
REF.imag = 2;
assert_isequal(R, REF);
//=============================================================================
A = ones(3, 0);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, 0);
//=============================================================================
A = ones(0, 4);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, 0);
//=============================================================================
A = ones(3, 0, 2, 4);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, 0);
//=============================================================================
A = ones(3, 0, 0, 0);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, 0);
//=============================================================================
A = ones(3, 0, 2, 4) + 4i;
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, 0);
//=============================================================================
A = reshape(1:18,3,2,3);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = reshape(1:18, 3, 2, 3) + 2i;
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_complex');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
REF = struct();
REF.real = reshape(1:18, 3, 2, 3);
REF.imag = ones(3, 2, 3) .* 2;
assert_isequal(R, REF);
//=============================================================================
A = sparse(4, 5, 9, 6, 7, 19);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(19));
R = h5read(test_h5_save_file, '/A/data');
assert_isequal(R, 9);
R = h5read(test_h5_save_file, '/A/ir');
assert_isequal(R, uint64(4));
R = h5read(test_h5_save_file, '/A/jc');
assert_isequal(R, uint64(5));
//=============================================================================
A = sparse(eye(0, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
//=============================================================================
A = sparse(eye(5, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
//=============================================================================
A = sparse(eye(5, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(4));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5read(test_h5_save_file, '/A/data');
assert_isequal(R, [1 1 1 1]);
R = h5read(test_h5_save_file, '/A/ir');
assert_isequal(R, uint64([1 2 3 4]));
R = h5read(test_h5_save_file, '/A/jc');
assert_isequal(R, uint64([1 2 3 4]));
//=============================================================================
A = sparse(eye(5, 4) + 2i);
[I, J, V] = IJV(A);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(20));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'double');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_complex');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A/data');
REF = struct();
REF.real = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
REF.imag = ones(1, 20) * 2;
R = h5read(test_h5_save_file, '/A/ir');
assert_isequal(R, uint64(I'));
R = h5read(test_h5_save_file, '/A/jc');
assert_isequal(R, uint64(J'));
//=============================================================================
// single
//=============================================================================
A = single(eye(3, 4));
h5_save(test_h5_save_file, 'A');
schema_version = h5readatt(test_h5_save_file, '/', 'NELSON_schema');
assert_isequal(schema_version, int32(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = single(1);
h5_save(test_h5_save_file, 'A');
schema_version = h5readatt(test_h5_save_file, '/', 'NELSON_schema');
assert_isequal(schema_version, int32(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = single(eye(3, 4) + i);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_complex');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
REF = struct();
REF.real = single(eye(3, 4));
REF.imag = single(ones(3, 4));
assert_isequal(R, REF);
//=============================================================================
A = single(1 + 2i);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_complex');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
REF = struct();
REF.real = single(1);
REF.imag = single(2);
assert_isequal(R, REF);
//=============================================================================
A = single(ones(3, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, single(0));
//=============================================================================
A = single(ones(0, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, single(0));
//=============================================================================
A = single(ones(3, 0, 2, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, single(0));
//=============================================================================
A = single(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, single(0));
//=============================================================================
A = single(ones(3, 0, 2, 4) + 4i);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, single(0));
//=============================================================================
A = single(reshape(1:18,3,2,3));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = single(reshape(1:18, 3, 2, 3) + 2i);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'single');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_complex');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
REF = struct();
REF.real = single(reshape(1:18, 3, 2, 3));
REF.imag = single(ones(3, 2, 3) .* 2);
assert_isequal(R, REF);
//=============================================================================
// integers
//=============================================================================
A = int8(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = int8(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, int8(0));
//=============================================================================
A = uint8(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = uint8(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = int16(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = int16(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, int16(0));
//=============================================================================
A = uint16(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = uint16(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint16(0));
//=============================================================================
A = int32(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = int32(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, int32(0));
//=============================================================================
A = uint32(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = uint32(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint32(0));
//=============================================================================
A = int64(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = int64(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, int64(0));
//=============================================================================
A = uint64(eye(3, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, A);
//=============================================================================
A = uint64(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint64(0));
//=============================================================================
// logical
//=============================================================================
A = logical(eye(3, 4));
h5_save(test_h5_save_file, 'A');
schema_version = h5readatt(test_h5_save_file, '/', 'NELSON_schema');
assert_isequal(schema_version, int32(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = logical(1);
h5_save(test_h5_save_file, 'A');
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, class(A));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
//=============================================================================
A = logical(ones(3, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(ones(0, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(ones(3, 0, 2, 4));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(ones(3, 0, 0, 0));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_empty');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(0));
//=============================================================================
A = logical(reshape(1:18,3,2,3));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5read(test_h5_save_file, '/A');
assert_isequal(R, uint8(A));
//=============================================================================
A = sparse(4, 5, true, 6, 7, 19);
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(20));
R = h5read(test_h5_save_file, '/A/data');
assert_isequal(R, uint8(1));
R = h5read(test_h5_save_file, '/A/ir');
assert_isequal(R, uint64(4));
R = h5read(test_h5_save_file, '/A/jc');
assert_isequal(R, uint64(5));
//=============================================================================
A = logical(sparse(eye(0, 4)));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
//=============================================================================
A = logical(sparse(eye(5, 0)));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
//=============================================================================
A = logical(sparse(eye(5, 4)));
h5_save(test_h5_save_file, 'A');
R = h5readatt(test_h5_save_file, '/A', 'NELSON_nzmax');
assert_isequal(R, uint64(4));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_dimensions');
assert_isequal(R, uint64(size(A)'));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_sparse');
assert_isequal(R, uint8(1));
R = h5readatt(test_h5_save_file, '/A', 'NELSON_class');
assert_isequal(R, 'logical');
R = h5read(test_h5_save_file, '/A/data');
assert_isequal(R, uint8([1 1 1 1]));
R = h5read(test_h5_save_file, '/A/ir');
assert_isequal(R, uint64([1 2 3 4]));
R = h5read(test_h5_save_file, '/A/jc');
assert_isequal(R, uint64([1 2 3 4]));
//=============================================================================
