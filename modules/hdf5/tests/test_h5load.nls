//=============================================================================
// Copyright (c) 2016-2019 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
assert_isequal(nargin('h5load'), 1);
assert_isequal(nargout('h5load'), 1);
//=============================================================================
H5_FILE = [fileparts(nfilename('fullpathext'), 'path'), '/h5save.nh5'];
assert_istrue(isfile(H5_FILE));
//=============================================================================
h5load(H5_FILE, 'A');
REF = logical(eye(5, 4));
assert_isequal(A, REF);
//=============================================================================
R = h5load(H5_FILE, 'A');
REF = struct();
REF.A = logical(eye(5, 4));
assert_isequal(R, REF);
//=============================================================================
h5load(H5_FILE, 'B');
REF = eye(5, 4);
assert_isequal(B, REF);
//=============================================================================
h5load(H5_FILE, 'I');
REF = ['NelSon';
'is    ';
'not   ';
'LensOn'];
assert_isequal(I, REF);
//=============================================================================
addpath([nelsonroot(), '/modules/overload/examples/complex']);
h5load(H5_FILE, 'cplx');
assert_isequal(class(cplx), 'complexObj');
assert_isequal(cplx.r, 3);
assert_isequal(cplx.i, 4);
//=============================================================================
