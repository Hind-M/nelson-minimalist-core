//=============================================================================
// Copyright (c) 2016-2017 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================

// Nelson Interface Generator (NIG) 
// SB02BD interface 
// http://slicot.org/objects/software/shared/doc/SB02OD.html
//      SUBROUTINE SB02OD( DICO, JOBB, FACT, UPLO, JOBL, SORT, N, M, P, A,
//     $                   LDA, B, LDB, Q, LDQ, R, LDR, L, LDL, RCOND, X,
//     $                   LDX, ALFAR, ALFAI, BETA, S, LDS, T, LDT, U,
//     $                   LDU, TOL, IWORK, DWORK, LDWORK, BWORK, INFO )
     
NIG_FUNCTION = struct();
NIG_FUNCTION.NELSON_NAME = 'slicot_sb02od';
NIG_FUNCTION.NELSON_NAMESPACE = 'Slicot'; // optional
NIG_FUNCTION.MODULE_NAME = 'slicot';
NIG_FUNCTION.SYMBOL = 'sb02od';
NIG_FUNCTION.LANGUAGE = 'fortran';

NIG_FUNCTION.VARIABLES = struct([]);

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'DICO';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).SUPPORTED_VALUES = {'C', 'D'};

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'JOBB';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).SUPPORTED_VALUES = {'B', 'G'};

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'FACT';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).SUPPORTED_VALUES = {'N', 'C', 'D', 'B'};

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'UPLO';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).SUPPORTED_VALUES = {'U', 'L'};

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'JOBL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).SUPPORTED_VALUES = {'Z', 'N'};

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'SORT';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).SUPPORTED_VALUES = {'S', 'U'};

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'N';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = '(int)B.getDimensions().getRows()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'M';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = '(int)B.getDimensions().getColumns()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'P';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'A';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDA';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'B';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDB';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'Q';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDQ';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, std::max((int)P.getContentAsInteger32Scalar(), (int)B.getDimensions().getRows()))';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'R';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDR';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, std::max((int)B.getDimensions().getColumns(), (int)P.getContentAsInteger32Scalar()))';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'L';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'RCOND';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'X';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, (int)B.getDimensions().getRows())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '(int)B.getDimensions().getRows()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDX';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'ALFAR';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '2 * (int)B.getDimensions().getColumns()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'ALFAI';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '2 * (int)B.getDimensions().getColumns()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'BETA';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '2 * (int)B.getDimensions().getColumns()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'S';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '(JOBB.getContentAsCString().compare("B") == 0) ? std::max(1, 2 * (int)B.getDimensions().getRows() + (int)B.getDimensions().getColumns()) : std::max(1, 2 * (int)B.getDimensions().getRows())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '(JOBB.getContentAsCString().compare("B") == 0) ? std::max(1, 2 * (int)B.getDimensions().getRows() + (int)B.getDimensions().getColumns()) : std::max(1, 2 * (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDS';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = '(JOBB.getContentAsCString().compare("B") == 0) ? std::max(1, 2 * (int)B.getDimensions().getRows() + (int)B.getDimensions().getColumns()) : std::max(1, 2 * (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'T';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '(JOBB.getContentAsCString().compare("B") == 0) ? std::max(1, 2 * (int)B.getDimensions().getRows() + (int)B.getDimensions().getColumns()) : (DICO.getContentAsCString().compare("D") == 0) ? std::max(1, 2 * (int)B.getDimensions().getRows()) : 1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '2 * (int)B.getDimensions().getRows()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDT';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = '(JOBB.getContentAsCString().compare("B") == 0) ? std::max(1, 2 * (int)B.getDimensions().getRows() + (int)B.getDimensions().getColumns()) : (DICO.getContentAsCString().compare("D") == 0) ? std::max(1, 2 * (int)B.getDimensions().getRows()) : 1';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'U';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, 2 * (int)B.getDimensions().getRows())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '2 * (int)B.getDimensions().getRows()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDU';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, 2 * (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'TOL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'IWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '(JOBB.getContentAsCString().compare("B") == 0) ? std::max(std::max(1, (int)B.getDimensions().getColumns()), 2 * (int)B.getDimensions().getRows()) : std::max(1, 2 * (int)B.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'DWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'std::max(std::max(std::max(7 * (2 * (int)B.getDimensions().getRows() + 1) + 16, 16 * (int)B.getDimensions().getRows()),2 * (int)B.getDimensions().getRows() + (int)B.getDimensions().getColumns()), 3 * (int)B.getDimensions().getColumns())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(std::max(std::max(7 * (2 * (int)B.getDimensions().getRows() + 1) + 16, 16 * (int)B.getDimensions().getRows()),2 * (int)B.getDimensions().getRows() + (int)B.getDimensions().getColumns()), 3 * (int)B.getDimensions().getColumns())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'BWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '2 * (int)B.getDimensions().getRows()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'INFO';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
