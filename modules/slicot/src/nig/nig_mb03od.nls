//=============================================================================
// Copyright (c) 2016-2017 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================

// Nelson Interface Generator (NIG)
// MB03OD interface
// http://slicot.org/objects/software/shared/doc/MB03OD.html

NIG_FUNCTION = struct();
NIG_FUNCTION.NELSON_NAME = 'slicot_mb03od';
NIG_FUNCTION.NELSON_NAMESPACE = 'Slicot';
NIG_FUNCTION.MODULE_NAME = 'slicot';
NIG_FUNCTION.SYMBOL = 'mb03od';
NIG_FUNCTION.LANGUAGE = 'fortran';

NIG_FUNCTION.VARIABLES = struct([]);
IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'JOBQR';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'M';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = '(int)A.getDimensions().getRows()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'N';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = '(int)A.getDimensions().getColumns()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'A';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'in_out';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, (int)A.getDimensions().getRows())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '(int)A.getDimensions().getColumns()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDA';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, (int)A.getDimensions().getRows())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'JPVT';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'in_out';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '(int)A.getDimensions().getColumns()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'RCOND';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'SVLMAX';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'TAU';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'std::min((int)A.getDimensions().getRows(), (int)A.getDimensions().getColumns())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'RANK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'SVAL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '3';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'DWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = '3 * (int)A.getDimensions().getColumns() + 1';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = '3 * (int)A.getDimensions().getColumns() + 1';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'INFO';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
