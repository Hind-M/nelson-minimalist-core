//=============================================================================
// Copyright (c) 2016-2017 Allan CORNET (Nelson)
//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================

// Nelson Interface Generator (NIG) 

// AB08ND interface 
// http://slicot.org/objects/software/shared/doc/AB08ND.html

NIG_FUNCTION = struct();
NIG_FUNCTION.NELSON_NAME = 'slicot_ab08nd';
NIG_FUNCTION.NELSON_NAMESPACE = 'Slicot'; // optional
NIG_FUNCTION.MODULE_NAME = 'slicot';
NIG_FUNCTION.SYMBOL = 'ab08nd';
NIG_FUNCTION.LANGUAGE = 'fortran';

NIG_FUNCTION.VARIABLES = struct([]);
IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'EQUIL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'character';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'N';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'M';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'P';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'A';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, N.getContentAsInteger32Scalar())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'N.getContentAsDoubleScalar()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDA';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, N.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'B';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, N.getContentAsInteger32Scalar())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'm';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDB';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, N.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'C';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, P.getContentAsInteger32Scalar())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'N.getContentAsInteger32Scalar()';


IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDC';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, P.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'D';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, P.getContentAsInteger32Scalar())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'm';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDD';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, P.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'NU';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'RANK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'DINFZ';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'NKROR';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'NKROL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'INFZ';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'N.getContentAsInteger32Scalar()';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'KRONR';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'std::max(N.getContentAsInteger32Scalar(), M.getContentAsInteger32Scalar()) + 1';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'KRONL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'std::max(N.getContentAsInteger32Scalar(), M.getContentAsInteger32Scalar()) + 1';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'AF';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'std::max(1, N.getContentAsInteger32Scalar() + M.getContentAsInteger32Scalar())';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'N.getContentAsInteger32Scalar() + _min(P.getContentAsInteger32Scalar(), M.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDAF';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, N.getContentAsInteger32Scalar() + M.getContentAsInteger32Scalar())';


IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'BF';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = 'N.getContentAsInteger32Scalar() + M.getContentAsInteger32Scalar()';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'std::max(1, N.getContentAsInteger32Scalar() + P.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDBF';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(1, N.getContentAsInteger32Scalar() + P.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'TOL';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'input';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'IWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'std::max(M.getContentAsInteger32Scalar(), P.getContentAsInteger32Scalar())';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'DWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'double_array';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_M = '1';
NIG_FUNCTION.VARIABLES(IDX).DIMENSION_N = 'std::max(std::max(M.getContentAsInteger32Scalar(), P.getContentAsInteger32Scalar()), N.getContentAsInteger32Scalar()) + std::max(3 * std::max(M.getContentAsInteger32Scalar(), P.getContentAsInteger32Scalar()) - 1, N.getContentAsInteger32Scalar() + std::max(N.getContentAsInteger32Scalar(), P.getContentAsInteger32Scalar()))';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'LDWORK';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'local';
NIG_FUNCTION.VARIABLES(IDX).VALUE = 'std::max(std::max(M.getContentAsInteger32Scalar(), P.getContentAsInteger32Scalar()), N.getContentAsInteger32Scalar()) + std::max(3 * std::max(M.getContentAsInteger32Scalar(), P.getContentAsInteger32Scalar()) - 1, N.getContentAsInteger32Scalar() + std::max(M.getContentAsInteger32Scalar(), P.getContentAsInteger32Scalar()))';

IDX = length(NIG_FUNCTION.VARIABLES) + 1;
NIG_FUNCTION.VARIABLES(IDX).NAME = 'INFO';
NIG_FUNCTION.VARIABLES(IDX).TYPE = 'integer';
NIG_FUNCTION.VARIABLES(IDX).MODE = 'output';
