//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
// Generated by Nelson Interface Generator 1.0.0
//=============================================================================
#include "Error.hpp"
#include "slicot_ab01odBuiltin.hpp"
//=============================================================================
using namespace Nelson;
//=============================================================================
#ifdef __cplusplus
extern "C"
{
#endif
extern int ab01od_ ( const char *STAGES, const char *JOBU, const char *JOBV, int N, int M, double *A, int LDA, double *B, int LDB, double *U, int LDU, double *V, int LDV, int &INDCON, int *KSTAIR, double TOL, int *IWORK, double *DWORK, int LDWORK, int &INFO);
#ifdef __cplusplus
}
#endif
//=============================================================================
// [A_OUT, B_OUT, U_OUT, V, INDCON_OUT, KSTAIR_OUT, INFO] = slicot_ab01od(STAGES, JOBU, JOBV, A_IN, B_IN, U_IN, INDCON_IN, KSTAIR_IN, TOL)
//=============================================================================
ArrayOfVector Nelson::SlicotGateway::slicot_ab01odBuiltin(Evaluator* eval, int nLhs, const ArrayOfVector& argIn)
{
    ArrayOfVector retval;
    if (nLhs > 7)
    {
        Error(eval, ERROR_WRONG_NUMBERS_OUTPUT_ARGS);
    }
    if (argIn.size() != 9)
    {
        Error(eval, ERROR_WRONG_NUMBERS_INPUT_ARGS);
    }

    // INPUT VARIABLES

    ArrayOf STAGES = argIn[0];
    std::string STAGES_string = STAGES.getContentAsCString();
    const char* STAGES_char = STAGES_string.c_str();
    ArrayOf JOBU = argIn[1];
    std::string JOBU_string = JOBU.getContentAsCString();
    const char* JOBU_char = JOBU_string.c_str();
    ArrayOf JOBV = argIn[2];
    std::string JOBV_string = JOBV.getContentAsCString();
    const char* JOBV_char = JOBV_string.c_str();
    ArrayOf TOL = argIn[3];
    double TOL_scalar = TOL.getContentAsDoubleScalar();

    // IN/OUT VARIABLES

    ArrayOf A = argIn[4];
    ArrayOf A_output = A;
    A.promoteType(NLS_DOUBLE);
    double *A_ptr = (double*)A.getDataPointer();
    ArrayOf B = argIn[5];
    ArrayOf B_output = B;
    B.promoteType(NLS_DOUBLE);
    double *B_ptr = (double*)B.getDataPointer();
    ArrayOf U = argIn[6];
    ArrayOf U_output = U;
    U.promoteType(NLS_DOUBLE);
    double *U_ptr = (double*)U.getDataPointer();
    ArrayOf INDCON = argIn[7];
    ArrayOf INDCON_output = INDCON;
    int INDCON_scalar = INDCON.getContentAsInteger32Scalar();
    ArrayOf KSTAIR = argIn[8];
    ArrayOf KSTAIR_output = KSTAIR;
    KSTAIR.promoteType(NLS_INT32);
    int *KSTAIR_ptr = (int*)KSTAIR.getDataPointer();

    // OUTPUT VARIABLES

    ArrayOf V_output = ArrayOf::doubleMatrix2dConstructor((indexType)std::max(1, (int)B.getDimensions().getColumns()), (indexType)(int)B.getDimensions().getColumns());
    double *V_output_ptr = (double*)V_output.getDataPointer();
    ArrayOf INFO_output = ArrayOf::int32VectorConstructor(1);
    int *INFO_output_ptr = (int*)INFO_output.getDataPointer();

    // LOCAL VARIABLES

    int N_local = (int)A .getDimensions().getRows();
    int M_local = (int)B.getDimensions().getRows();
    int LDA_local = std::max(1, (int)A.getDimensions().getRows());
    int LDB_local = std::max(1, (int)A.getDimensions().getRows());
    int LDU_local = std::max(1, (int)A.getDimensions().getRows());
    int LDV_local = std::max(1, (int)B.getDimensions().getColumns());
    int *IWORK_local = (int*)ArrayOf::allocateArrayOf(NLS_INT32, 1 * 2 * (int)B.getDimensions().getColumns());
    double *DWORK_local = (double*)ArrayOf::allocateArrayOf(NLS_DOUBLE, 1 * std::max(1, std::max((int)A.getDimensions().getRows(), (int)B.getDimensions().getColumns()) + std::max((int)A.getDimensions().getRows(), 3 * (int)B.getDimensions().getColumns())));
    int LDWORK_local = std::max(1, std::max((int)A.getDimensions().getRows(), (int)B.getDimensions().getColumns()) + std::max((int)A.getDimensions().getRows(), 3 * (int)B.getDimensions().getColumns()));

    // ASSIGN OUTPUT VARIABLES

    if (nLhs > 0)
    {
        retval.push_back(A_output);
    }
    if (nLhs > 1)
    {
        retval.push_back(B_output);
    }
    if (nLhs > 2)
    {
        retval.push_back(U_output);
    }
    if (nLhs > 3)
    {
        retval.push_back(V_output);
    }
    if (nLhs > 4)
    {
        retval.push_back(INDCON_output);
    }
    if (nLhs > 5)
    {
        retval.push_back(KSTAIR_output);
    }
    if (nLhs > 6)
    {
        retval.push_back(INFO_output);
    }

    return retval;
}
//=============================================================================
