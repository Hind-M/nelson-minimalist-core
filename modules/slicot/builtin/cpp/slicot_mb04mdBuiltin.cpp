//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
// Generated by Nelson Interface Generator 1.0.0
//=============================================================================
#include "Error.hpp"
#include "slicot_mb04mdBuiltin.hpp"
//=============================================================================
using namespace Nelson;
//=============================================================================
#ifdef __cplusplus
extern "C"
{
#endif
extern int mb04md_ ( int *N, double *MAXRED, double *A, int *LDA, double *SCALE, int *INFO);
#ifdef __cplusplus
}
#endif
//=============================================================================
// [MAXRED_OUT, A_OUT, SCALE, INFO] = slicot_mb04md(MAXRED_IN, A_IN)
//=============================================================================
ArrayOfVector Nelson::SlicotGateway::slicot_mb04mdBuiltin(Evaluator* eval, int nLhs, const ArrayOfVector& argIn)
{
    ArrayOfVector retval;
    if (nLhs > 4)
    {
        Error(eval, ERROR_WRONG_NUMBERS_OUTPUT_ARGS);
    }
    if (argIn.size() != 2)
    {
        Error(eval, ERROR_WRONG_NUMBERS_INPUT_ARGS);
    }
    // INPUT VARIABLES
    // IN/OUT VARIABLES
    ArrayOf MAXRED = argIn[0];
    Dimensions dimsMAXRED = MAXRED.getDimensions();
    if (!dimsMAXRED.isScalar())
    {
        Error(eval, _W("Input argument #1: scalar expected."));
    }
    MAXRED.promoteType(NLS_DOUBLE);
    ArrayOf MAXRED_output = MAXRED;
    MAXRED_output.ensureSingleOwner();
    double *MAXRED_output_ptr = (double*)MAXRED_output.getDataPointer();
    ArrayOf A = argIn[1];
    Dimensions dimsA = A.getDimensions();
    Dimensions dimsA_expected((int)A.getDimensions().getRows(), (int)A.getDimensions().getColumns());
    if (!dimsA.equals(dimsA_expected))
    {
        Error(eval, _("Input argument #2: wrong size.") + " " + dimsA_expected.toString() + " " + "expected" + ".");
    }
    A.promoteType(NLS_DOUBLE);
    ArrayOf A_output = A;
    A_output.ensureSingleOwner();
    double *A_output_ptr = (double*)A_output.getDataPointer();
    // OUTPUT VARIABLES
    ArrayOf SCALE_output = ArrayOf::doubleMatrix2dConstructor((indexType)1, (indexType)(int)A.getDimensions().getColumns());
    double *SCALE_output_ptr = (double*)SCALE_output.getDataPointer();
    ArrayOf INFO_output = ArrayOf::int32VectorConstructor(1);
    int *INFO_output_ptr = (int*)INFO_output.getDataPointer();
    // LOCAL VARIABLES
    ArrayOf N_local = ArrayOf::int32VectorConstructor(1);
    int* N_local_ptr = (int*)N_local.getDataPointer();
    N_local_ptr[0] = (int)A.getDimensions().getColumns();
    ArrayOf LDA_local = ArrayOf::int32VectorConstructor(1);
    int* LDA_local_ptr = (int*)LDA_local.getDataPointer();
    LDA_local_ptr[0] = std::max(1, (int)A.getDimensions().getColumns());
    // CALL EXTERN FUNCTION
    try
    {
        mb04md_ ( N_local_ptr, MAXRED_output_ptr, A_output_ptr, LDA_local_ptr, SCALE_output_ptr, INFO_output_ptr);
    }
    catch (std::runtime_error &e)
    {
        Error(eval, "mb04md function fails.");
    }
    // ASSIGN OUTPUT VARIABLES
    if (nLhs > 0)
    {
        retval.push_back(MAXRED_output);
    }
    if (nLhs > 1)
    {
        retval.push_back(A_output);
    }
    if (nLhs > 2)
    {
        retval.push_back(SCALE_output);
    }
    if (nLhs > 3)
    {
        retval.push_back(INFO_output);
    }
    return retval;
}
//=============================================================================
