//=============================================================================
// LICENCE_BLOCK_BEGIN
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// LICENCE_BLOCK_END
//=============================================================================
// Generated by Nelson Interface Generator 1.0.0
//=============================================================================
#include "Error.hpp"
#include "slicot_ab04mdBuiltin.hpp"
//=============================================================================
using namespace Nelson;
//=============================================================================
#ifdef __cplusplus
extern "C"
{
#endif
extern int ab04md_ ( const char *TYPE, int N, int M, int P, double ALPHA, double BETA, double *A, int LDA, double *B, int LDB, double *C, int LDC, double *D, int LDD, int *IWORK, double *DWORK, int LDWORK, int &INFO);
#ifdef __cplusplus
}
#endif
//=============================================================================
// [A_OUT, B_OUT, C_OUT, D_OUT, INFO] = slicot_ab04md(TYPE, ALPHA, BETA, A_IN, B_IN, C_IN, D_IN)
//=============================================================================
ArrayOfVector Nelson::SlicotGateway::slicot_ab04mdBuiltin(Evaluator* eval, int nLhs, const ArrayOfVector& argIn)
{
    ArrayOfVector retval;
    if (nLhs > 5)
    {
        Error(eval, ERROR_WRONG_NUMBERS_OUTPUT_ARGS);
    }
    if (argIn.size() != 7)
    {
        Error(eval, ERROR_WRONG_NUMBERS_INPUT_ARGS);
    }

    // INPUT VARIABLES

    ArrayOf TYPE = argIn[0];
    std::string TYPE_string = TYPE.getContentAsCString();
    const char* TYPE_char = TYPE_string.c_str();
    ArrayOf ALPHA = argIn[1];
    double ALPHA_scalar = ALPHA.getContentAsDoubleScalar();
    ArrayOf BETA = argIn[2];
    double BETA_scalar = BETA.getContentAsDoubleScalar();

    // IN/OUT VARIABLES

    ArrayOf A = argIn[3];
    ArrayOf A_output = A;
    A.promoteType(NLS_DOUBLE);
    double *A_ptr = (double*)A.getDataPointer();
    ArrayOf B = argIn[4];
    ArrayOf B_output = B;
    B.promoteType(NLS_DOUBLE);
    double *B_ptr = (double*)B.getDataPointer();
    ArrayOf C = argIn[5];
    ArrayOf C_output = C;
    C.promoteType(NLS_DOUBLE);
    double *C_ptr = (double*)C.getDataPointer();
    ArrayOf D = argIn[6];
    ArrayOf D_output = D;
    D.promoteType(NLS_DOUBLE);
    double *D_ptr = (double*)D.getDataPointer();

    // OUTPUT VARIABLES

    ArrayOf INFO_output = ArrayOf::int32VectorConstructor(1);
    int *INFO_output_ptr = (int*)INFO_output.getDataPointer();

    // LOCAL VARIABLES

    int N_local = (int)A .getDimensions().getRows();
    int M_local = (int)B.getDimensions().getColumns();
    int P_local = (int)C.getDimensions().getRows();
    int LDA_local = std::max(1, (int)A.getDimensions().getRows());
    int LDB_local = std::max(1, (int)A.getDimensions().getRows());
    int LDC_local = std::max(1, (int)C.getDimensions().getRows());
    int LDD_local = std::max(1, (int)C.getDimensions().getRows());
    int *IWORK_local = (int*)ArrayOf::allocateArrayOf(NLS_INT32, 1 * (int)A.getDimensions().getRows());
    double *DWORK_local = (double*)ArrayOf::allocateArrayOf(NLS_DOUBLE, 1 * std::max(1, (int)A.getDimensions().getRows()));
    int LDWORK_local = std::max(1, (int)A.getDimensions().getRows());

    // ASSIGN OUTPUT VARIABLES

    if (nLhs > 0)
    {
        retval.push_back(A_output);
    }
    if (nLhs > 1)
    {
        retval.push_back(B_output);
    }
    if (nLhs > 2)
    {
        retval.push_back(C_output);
    }
    if (nLhs > 3)
    {
        retval.push_back(D_output);
    }
    if (nLhs > 4)
    {
        retval.push_back(INFO_output);
    }

    return retval;
}
//=============================================================================
